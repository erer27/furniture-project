/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 BP_Martin_C.glb 
*/

import React, {
  MutableRefObject,
  useCallback,
  useEffect,
  useRef,
  useState,
} from "react";
import { useGLTF } from "@react-three/drei";
import { furnitureInfo } from "./FurnitureInfo";
import { Group, Vector3 } from "three";
import useFurnitureControl from "../hooks/useFurnitureControl";
import { useDispatch, UseDispatch } from "react-redux";
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import * as THREE from "three";
import { useDrag } from "@use-gesture/react";
import { ReactThreeFiber, ThreeEvent } from "@react-three/fiber";

const initialState = {
  targetFurniture: "",
};

const furnitureControlSlice = createSlice({
  name: "furnitureControl",
  initialState: initialState,
  reducers: {
    setTargetFurniture: (
      state: typeof initialState,
      action: PayloadAction<string>
    ) => {
      state.targetFurniture = action.payload;
    },
  },
});

const { setTargetFurniture } = furnitureControlSlice.actions;

export const furnitureControlReducer = furnitureControlSlice.reducer;

type furnitureProps = { furnitureInfo: furnitureInfo };

export default function Furniture({ furnitureInfo }: furnitureProps) {
  const obj = useRef<any>();
  const dispatch = useDispatch();
  const [shiftKeyPressed, setShiftKeyPressed] = useState(false);

  const [pressedKey, setPressedKey] = useState({
    Shift: false,
    ArrowRight: false,
    ArrowLeft: false,
    ArrowUp: false,
    ArrowDown: false,
  });

  const handleClick = useCallback(
    (event: ThreeEvent<MouseEvent>) => {
      dispatch(setTargetFurniture(furnitureInfo.file));
      console.log(pressedKey);
    },
    [dispatch]
  ) as (event: ThreeEvent<MouseEvent>) => void;

  const clock = new THREE.Clock();
  useFurnitureControl(
    obj.current,
    shiftKeyPressed,
    pressedKey,
    clock.getDelta()
  );

  const handleKeyDown = useCallback(
    (event: KeyboardEvent) => {
      if (event.key == "Shift") {
        setPressedKey((prevPressedKey) => {
          console.log(clock.getDelta());
          return { ...prevPressedKey, Shift: true };
        });
      } else if (event.key == "ArrowRight") {
        setPressedKey((prevPressedKey) => {
          return { ...prevPressedKey, ArrowRight: true };
        });
      } else if (event.key == "ArrowLeft") {
        setPressedKey((prevPressedKey) => {
          return { ...prevPressedKey, ArrowLeft: true };
        });
      } else if (event.key == "ArrowUp") {
        setPressedKey((prevPressedKey) => {
          return { ...prevPressedKey, ArrowUp: true };
        });
      } else if (event.key == "ArrowDown") {
        setPressedKey((prevPressedKey) => {
          return { ...prevPressedKey, ArrowDown: true };
        });
      }
    },
    [dispatch]
  );

  const handleKeyUp = useCallback(
    (event: KeyboardEvent) => {
      if (event.key == "Shift") {
        setPressedKey((prevPressedKey) => {
          return { ...prevPressedKey, Shift: false };
        });
      } else if (event.key == "ArrowRight") {
        setPressedKey((prevPressedKey) => {
          return { ...prevPressedKey, ArrowRight: false };
        });
      } else if (event.key == "ArrowLeft") {
        setPressedKey((prevPressedKey) => {
          return { ...prevPressedKey, ArrowLeft: false };
        });
      } else if (event.key == "ArrowUp") {
        setPressedKey((prevPressedKey) => {
          return { ...prevPressedKey, ArrowUp: false };
        });
      } else if (event.key == "ArrowDown") {
        setPressedKey((prevPressedKey) => {
          return { ...prevPressedKey, ArrowDown: false };
        });
      }
    },
    [dispatch]
  );

  // add event listener to highlight dragged objects
  const position = new Vector3(...furnitureInfo.position);
  const rotation = new THREE.Euler(...furnitureInfo.rotation);

  const { nodes, materials } = useGLTF(`./furnitures/${furnitureInfo.file}`);
  const meshs = Object.values(nodes).filter((mesh) => mesh.type === "Mesh");

  useEffect(() => {
    console.log("furniture rerender");
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("keyup", handleKeyUp);
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("keyup", handleKeyUp);
    };
  }, [handleKeyDown, handleKeyUp, obj]);
  return (
    <group
      dispose={null}
      ref={obj}
      position={position}
      onClick={(e) => {
        e.stopPropagation();
        handleClick(e);
      }}
      rotation={rotation}
      userData={{ file: furnitureInfo.file }}
    >
      {meshs.map((mesh: any) => (
        <mesh
          key={mesh.uuid}
          geometry={mesh.geometry}
          material={mesh.material}
        />
      ))}
    </group>
  );
}
