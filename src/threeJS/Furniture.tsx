/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 BP_Martin_C.glb 
*/

import React, { MutableRefObject, useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { furnitureInfo } from "./FurnitureInfo";
import { Group, Vector3 } from "three";
import useFurnitureControl from "../hooks/useFurnitureControl";
import { useDispatch, UseDispatch } from "react-redux";

const initialState = {
  targetFurniture: "",
};

export function FurnitureControlReducer(
  targetState = initialState,
  action: any
) {
  switch (action.type) {
    case "targetUpdate": {
      return {
        ...targetState,
        targetFurniture: action.payload.targetFurniture,
      };
    }
    default:
      return targetState;
  }
}

type furnitureProps = { furnitureInfo: furnitureInfo };

export default function Furniture({ furnitureInfo }: furnitureProps) {
  const obj = useRef<any>();
  const dispatch = useDispatch();

  const [controlFurniture, setControlFurniture] = useState<string>();

  const handleClick = () => {
    console.log(obj.current.userData.file);
    dispatch({
      type: "targetUpdate",
      payload: { targetFurniture: furnitureInfo.file },
    });
  };
  useFurnitureControl(obj.current);

  // add event listener to highlight dragged objects
  const position = new Vector3(...furnitureInfo.position);
  const rotation = furnitureInfo.rotation;

  const { nodes, materials } = useGLTF(`./furnitures/${furnitureInfo.file}`);
  const meshs = Object.values(nodes).filter((mesh) => mesh.type === "Mesh");
  useEffect(() => {
    //console.log(nodes);
  }, []);
  return (
    <group
      dispose={null}
      ref={obj}
      position={position}
      onClick={handleClick}
      rotation={rotation}
      userData={{ file: furnitureInfo.file }}
    >
      {meshs.map((mesh: any) => (
        <mesh
          key={mesh.uuid}
          geometry={mesh.geometry}
          material={mesh.material}
        />
      ))}
    </group>
  );
}
